version: '3.8' 
services:
  opl_grafana_meilisearch:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5500:5500"
    environment:
      - ASPNETCORE_URLS=http://+:5500
    networks:
      - infisical
    depends_on:
      - backend
  blackbox:
    image: prom/blackbox-exporter:latest
    ports:
      - "9115:9115"
    networks:
      - infisical
      - otel
  meilisearch:
    image: getmeili/meilisearch:v1.9
    ports:
      - "7700:7700"
    environment:
      - MEILI_ENV=development
      - MEILI_MASTER_KEY=masterKey
    volumes:
      - ./meili_data:/meili_data
    networks:
      - otel

  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    depends_on:
      blackbox:
        condition: "service_started"
        required: false
    networks:
      - otel
  
  init:
    image: &tempoImage grafana/tempo:2.5.0
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"

  tempo:
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/tempo.yml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
    depends_on:
      - otel-collector
    networks:
      - otel
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro      
      - ./Docker/loki.yml:/etc/loki/local-config.yaml
      - loki:/data/loki
    restart: unless-stopped
    ports:
      - 3100:3100
    networks:
      - otel

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./Docker/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    user: root
    ports:
      - 3001:3000
    depends_on:
      - prometheus
      - tempo
      - loki      
    networks:
      - otel
  otel-collector:
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./Docker/otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
      - "9200:55679"  # zpages
    networks:
      - otel

  db-migration:
    container_name: infisical-db-migration
    depends_on:
      db:
        condition: service_healthy
    image: infisical/infisical:latest-postgres
    env_file: .env
    command: npm run migration:latest
    pull_policy: always
    networks:
      - infisical

  backend:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully
    image: infisical/infisical:latest-postgres
    pull_policy: always
    env_file: .env
    ports:
      - "80:8080"
    environment:
      - NODE_ENV=production
    networks:
      - infisical

  redis:
    image: redis
    container_name: infisical-dev-redis
    env_file: .env
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    networks:
      - infisical
    volumes:
      - redis_data:/data

  db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - infisical
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  infisical:
  otel:

volumes:
  loki:
  prometheus:
  tempo:
  grafana-data:
  pg_data:
    driver: local
  redis_data:
    driver: local
